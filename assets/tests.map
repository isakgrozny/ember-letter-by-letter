{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/components/lxl-container.jshint.js","dummy/tests/controllers/application.jshint.js","dummy/tests/controllers/lxl-tags/pause.jshint.js","dummy/tests/controllers/usage/callbacks.jshint.js","dummy/tests/controllers/usage/keys.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/ember-keyboard/register-test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/ember-lxl-test.js","dummy/tests/integration/components/ember-lxl-test.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/installation.jshint.js","dummy/tests/routes/lxl-tags.jshint.js","dummy/tests/routes/lxl-tags/custom.jshint.js","dummy/tests/routes/lxl-tags/index.jshint.js","dummy/tests/routes/lxl-tags/instant.jshint.js","dummy/tests/routes/lxl-tags/pause.jshint.js","dummy/tests/routes/lxl-tags/stagger.jshint.js","dummy/tests/routes/lxl-tags/tween-effect.jshint.js","dummy/tests/routes/lxl-tags/tween-rate.jshint.js","dummy/tests/routes/lxl-tween-adapters.jshint.js","dummy/tests/routes/usage.jshint.js","dummy/tests/routes/usage/callbacks.jshint.js","dummy/tests/routes/usage/cps.jshint.js","dummy/tests/routes/usage/index.jshint.js","dummy/tests/routes/usage/instant.jshint.js","dummy/tests/routes/usage/keys.jshint.js","dummy/tests/routes/usage/scrollable.jshint.js","dummy/tests/routes/usage/tween-effect.jshint.js","dummy/tests/routes/usage/tween-rate.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test.js","dummy/tests/unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test.jshint.js","dummy/tests/unit/lxl-tags/instant-test.js","dummy/tests/unit/lxl-tags/instant-test.jshint.js","dummy/tests/unit/lxl-tags/pause-test.js","dummy/tests/unit/lxl-tags/pause-test.jshint.js","dummy/tests/unit/lxl-tags/stagger-test.js","dummy/tests/unit/lxl-tags/stagger-test.jshint.js","dummy/tests/unit/lxl-tags/tween-effect-test.js","dummy/tests/unit/lxl-tags/tween-effect-test.jshint.js","dummy/tests/unit/lxl-tags/tween-rate-test.js","dummy/tests/unit/lxl-tags/tween-rate-test.jshint.js","dummy/tests/unit/lxl-tween-adapters/jquery-test.js","dummy/tests/unit/lxl-tween-adapters/jquery-test.jshint.js","dummy/tests/unit/utils/ember-add-class-to-test.js","dummy/tests/unit/utils/ember-add-class-to-test.jshint.js","dummy/tests/unit/utils/parse-lxl-tag-test.js","dummy/tests/unit/utils/parse-lxl-tag-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/lxl-container.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/lxl-container.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/lxl-container.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/lxl-tags/pause.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/lxl-tags/pause.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/lxl-tags/pause.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/usage/callbacks.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/usage/callbacks.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/usage/callbacks.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/usage/keys.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/usage/keys.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/usage/keys.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard'], function (exports, _ember, _emberKeyboard) {\n\n  var keyEvent = function keyEvent(app, attributes, type) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (['ctrl', 'meta', 'alt', 'shift'].indexOf(attribute) > -1) {\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes) {\n      return keyEvent(app, attributes, 'keydown');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes) {\n      return keyEvent(app, attributes, 'keyup');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes) {\n      return keyEvent(app, attributes, 'keypress');\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/ember-lxl-test', ['exports', 'ember', 'ember-qunit', 'ember-letter-by-letter'], function (exports, _ember, _emberQunit, _emberLetterByLetter) {\n  var getOwner = _ember['default'].getOwner;\n  var set = _ember['default'].set;\n  var later = _ember['default'].run.later;\n\n  (0, _emberQunit.moduleForComponent)('ember-lxl', 'Integration | Component | ember lxl', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberLetterByLetter.initialize)(getOwner(this));\n    }\n  });\n\n  (0, _emberQunit.test)('it parses words into word and letter spans', function (assert) {\n    assert.expect(2);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Word, I have a word.'], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-word').length, 5, 'it wraps words');\n    assert.equal(this.$('.lxl-word:first .lxl-letter').length, 5, 'it wraps characters into spans');\n  });\n\n  (0, _emberQunit.test)('tags are respected', function (assert) {\n    assert.expect(8);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 92\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Outside <span id=\\'span\\'>inside <strong id=\\'strong\\'>bold</strong></span>'], ['loc', [null, [1, 0], [1, 92]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-word').length, 5, 'it wraps words');\n\n    var $span = this.$('#span');\n    assert.equal($span.length, 1, 'span is present');\n    assert.equal($span.text().trim(), 'inside  bold', 'span contains the right text');\n    assert.ok($span.is('span'), 'span is correct element');\n\n    var $strong = this.$('#strong');\n    assert.equal($strong.length, 1, 'strong is present');\n    assert.equal($strong.text().trim(), 'bold', 'strong contains the right text');\n    assert.ok($strong.is('strong'), 'strong is correct element');\n\n    assert.equal(this.$('.lxl-word').length - this.$('.lxl-dom-element').length, 3, 'correct number of lxl-words');\n  });\n\n  (0, _emberQunit.test)('it executes lxl-tags', function (assert) {\n    var _this = this;\n\n    assert.expect(6);\n\n    var done = assert.async();\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 127\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Slow [[#cps 1000000000]]very fast, and it\\'s still fast and fast fast fast[[/cps]] slow.', 'cps', 10, 'tweenRate', 5], ['loc', [null, [1, 0], [1, 127]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-word:first').css('opacity'), 1, 'first starts out 0');\n    assert.equal(this.$('.lxl-word:last').css('opacity'), 0, 'last starts out 0');\n    assert.equal(this.$('.lxl-word').length - this.$('.lxl-tag').length, 12, 'correct number of lxl-words');\n\n    later(function () {\n      assert.equal(_this.$('.lxl-word:nth(1)').css('opacity'), 1, 'second word faded in');\n      assert.equal(_this.$('.lxl-word:nth(10)').css('opacity'), 1, 'last fast word faded in');\n      assert.ok(parseFloat(_this.$('.lxl-word:last .lxl-letter:last').css('opacity')) < 1, 'last letter not faded in');\n\n      done();\n    }, 1000);\n  });\n\n  (0, _emberQunit.test)('it gradually fades the characters in', function (assert) {\n    var _this2 = this;\n\n    assert.expect(5);\n\n    var done = assert.async();\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 46\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Word.', 'cps', 100, 'tweenRate', 5], ['loc', [null, [1, 0], [1, 46]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-letter:first').css('opacity'), 0, 'first starts out 0');\n    assert.equal(this.$('.lxl-letter:last').css('opacity'), 0, 'last starts out 0');\n\n    later(function () {\n      assert.ok(_this2.$('.lxl-letter:first').css('opacity') > _this2.$('.lxl-letter:last').css('opacity'), 'fades from first to last');\n    }, 20);\n\n    later(function () {\n      assert.equal(_this2.$('.lxl-letter:first').css('opacity'), 1, 'first becomes 1');\n      assert.equal(_this2.$('.lxl-letter:last').css('opacity'), 1, 'last becomes 1');\n\n      done();\n    }, 125);\n  });\n\n  (0, _emberQunit.test)('it pauses once it reaches the bottom of the container', function (assert) {\n    var _this3 = this;\n\n    assert.expect(19);\n\n    var done = assert.async();\n\n    set(this, 'completed', function () {\n      assert.ok(false, 'ran onComplete callback prematurely');\n    });\n\n    set(this, 'paused', function () {\n      assert.ok(true, 'ran onPageEnd callback');\n    });\n\n    set(this, 'resumed', function () {\n      assert.ok(true, 'ran onPageStart callback');\n    });\n\n    set(this, 'started', function () {\n      assert.ok(true, 'ran onStartedWriting callback');\n    });\n\n    set(this, 'stopped', function () {\n      assert.ok(true, 'ran onStoppedWriting callback');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'triple-curlies'\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 14,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'style', 'width: 250px; height: 50px; font-family: DejaVu Serif; font-size: 18px;');\n          var el2 = dom.createTextNode('\\n      ');\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment('');\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode('\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'This is a really long sentance, but that\\'s totally necessary!', 'cps', 10000000000, 'tweenRate', 0, 'onComplete', ['subexpr', 'action', [['get', 'completed', ['loc', [null, [7, 27], [7, 36]]]]], [], ['loc', [null, [7, 19], [7, 37]]]], 'onPageEnd', ['subexpr', 'action', [['get', 'paused', ['loc', [null, [8, 26], [8, 32]]]]], [], ['loc', [null, [8, 18], [8, 33]]]], 'onPageStart', ['subexpr', 'action', [['get', 'resumed', ['loc', [null, [9, 28], [9, 35]]]]], [], ['loc', [null, [9, 20], [9, 36]]]], 'onStartedWriting', ['subexpr', 'action', [['get', 'started', ['loc', [null, [10, 33], [10, 40]]]]], [], ['loc', [null, [10, 25], [10, 41]]]], 'onStoppedWriting', ['subexpr', 'action', [['get', 'stopped', ['loc', [null, [11, 33], [11, 40]]]]], [], ['loc', [null, [11, 25], [11, 41]]]]], ['loc', [null, [3, 6], [12, 8]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-word').length, 10, 'it immediately writes all words');\n    assert.equal(this.$('.lxl-letter').length, 4, 'it starts with this many characters wrapped');\n\n    later(function () {\n      assert.equal(_this3.$('.lxl-letter').length, 17, 'it continues wrapping characters');\n    }, 350);\n\n    later(function () {\n      assert.equal(_this3.$('.lxl-letter').length, 17, 'it has stopped wrapping characters');\n\n      _this3.$('.lxl-container').trigger('mouseup');\n\n      set(_this3, 'completed', function () {\n        assert.ok(true, 'ran onComplete callback at correct time');\n      });\n    }, 400);\n\n    later(function () {\n      assert.equal(_this3.$('.lxl-letter').length, 42, 'it has resumed wrapping characters');\n\n      _this3.$('.lxl-container').trigger('mouseup');\n    }, 750);\n\n    later(function () {\n      assert.equal(_this3.$('.lxl-letter').length, 52, 'it completes writing');\n\n      _this3.$('.lxl-container').trigger('mouseup');\n\n      done();\n    }, 1000);\n  });\n\n  (0, _emberQunit.test)('text can be instawrote with a click', function (assert) {\n    var _this4 = this;\n\n    assert.expect(2);\n\n    var done = assert.async();\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'triple-curlies'\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 7,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement('div');\n          dom.setAttribute(el1, 'style', 'width: 250px; height: 50px; font-family: DejaVu Serif; font-size: 18px;');\n          var el2 = dom.createTextNode('\\n      ');\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment('');\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode('\\n    ');\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'This is a really long sentance, but that\\'s totally necessary!'], ['loc', [null, [3, 6], [5, 8]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.lxl-word:last').css('opacity'), 0, 'last word starts faded out');\n\n    later(function () {\n      _this4.$('.lxl-container').trigger('mouseup');\n    }, 25);\n\n    later(function () {\n      _this4.$('.lxl-container').trigger('mouseup');\n    }, 50);\n\n    later(function () {\n      _this4.$('.lxl-container').trigger('mouseup');\n    }, 75);\n\n    later(function () {\n      _this4.$('.lxl-container').trigger('mouseup');\n    }, 100);\n\n    later(function () {\n      assert.equal(_this4.$('.lxl-word:last').css('opacity'), 1, 'last word faded in');\n\n      done();\n    }, 250);\n  });\n\n  (0, _emberQunit.test)('text is not scrollable by default', function (assert) {\n    assert.expect(1);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 41\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Word, I have a word.'], ['loc', [null, [1, 0], [1, 41]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(!this.$('.lxl-container').hasClass('ps-container'), 'scrollbar not applied');\n  });\n\n  (0, _emberQunit.test)('text can be scrollable', function (assert) {\n    assert.expect(1);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 57\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ember-lxl', [], ['text', 'Word, I have a word.', 'scrollable', true], ['loc', [null, [1, 0], [1, 57]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.lxl-container').hasClass('ps-container'), 'scrollbar applied');\n  });\n});","define('dummy/tests/integration/components/ember-lxl-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/ember-lxl-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ember-lxl-test.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/installation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/installation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/installation.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/custom.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/custom.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/custom.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/instant.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/instant.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/instant.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/pause.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/pause.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/pause.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/stagger.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/stagger.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/stagger.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/tween-effect.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/tween-effect.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/tween-effect.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tags/tween-rate.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tags/tween-rate.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tags/tween-rate.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/lxl-tween-adapters.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/lxl-tween-adapters.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/lxl-tween-adapters.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/callbacks.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/callbacks.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/callbacks.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/cps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/cps.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/cps.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/instant.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/instant.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/instant.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/keys.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/keys.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/keys.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/scrollable.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/scrollable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/scrollable.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/tween-effect.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/tween-effect.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/tween-effect.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/usage/tween-rate.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/usage/tween-rate.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/usage/tween-rate.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test', ['exports', 'ember', 'dummy/instance-initializers/ember-letter-by-letter/register-lxl-tags', 'qunit', 'dummy/tests/helpers/destroy-app'], function (exports, _ember, _dummyInstanceInitializersEmberLetterByLetterRegisterLxlTags, _qunit, _dummyTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | ember letter by letter/register lxl tags', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  (0, _qunit.test)('lxl-tags are uninitialized', function (assert) {\n    assert.expect(1);\n\n    (0, _dummyInstanceInitializersEmberLetterByLetterRegisterLxlTags.initialize)(this.appInstance);\n\n    this.appInstance.register('lxl-tag:foo', _ember['default'].Object.extend());\n\n    assert.ok(this.appInstance.lookup('lxl-tag:foo').create, 'not initialized');\n  });\n});","define('dummy/tests/unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/ember-letter-by-letter/register-lxl-tags-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tags/instant-test', ['exports', 'ember', 'ember-letter-by-letter/lxl-tags/instant', 'qunit'], function (exports, _ember, _emberLetterByLetterLxlTagsInstant, _qunit) {\n  var get = _ember['default'].get;\n\n  (0, _qunit.module)('Unit | LXLTag | instant');\n\n  ['open', 'execute'].forEach(function (methodName) {\n    (0, _qunit.test)(methodName + ' sets a new cps on the lxlContainer', function (assert) {\n      assert.expect(2);\n\n      var instant = _emberLetterByLetterLxlTagsInstant['default'].create();\n      var lxlContainer = {};\n      var promise = instant[methodName](lxlContainer);\n\n      assert.equal(get(lxlContainer, 'instant'), true, 'instant was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n  });\n\n  (0, _qunit.test)('close sets a new cps on the lxlContainer', function (assert) {\n    assert.expect(2);\n\n    var instant = _emberLetterByLetterLxlTagsInstant['default'].create();\n    var lxlContainer = {};\n    var promise = instant.close(lxlContainer);\n\n    assert.equal(get(lxlContainer, 'instant'), false, 'instant was set');\n    assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n  });\n});","define('dummy/tests/unit/lxl-tags/instant-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tags/instant-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tags/instant-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tags/pause-test', ['exports', 'ember', 'ember-keyboard', 'ember-letter-by-letter/lxl-tags/pause', 'qunit'], function (exports, _ember, _emberKeyboard, _emberLetterByLetterLxlTagsPause, _qunit) {\n  var Evented = _ember['default'].Evented;\n  var on = _ember['default'].on;\n  var later = _ember['default'].run.later;\n\n  var LxlContainer = _ember['default'].Object.extend(Evented, {\n    keys: [],\n    _notifyStartedWriting: function _notifyStartedWriting() {},\n    _notifyStoppedWriting: function _notifyStoppedWriting() {}\n  });\n\n  (0, _qunit.module)('Unit | LXLTag | pause');\n\n  ['open', 'execute'].forEach(function (methodName) {\n    (0, _qunit.test)(methodName + ' resolves immediately if lxlContainer isInstant', function (assert) {\n      var done = assert.async();\n\n      assert.expect(1);\n\n      var resolved = false;\n\n      var pause = _emberLetterByLetterLxlTagsPause['default'].create();\n      var lxlContainer = LxlContainer.create({ isInstant: true });\n      var promise = pause[methodName](lxlContainer);\n\n      promise.then(function () {\n        resolved = true;\n      });\n\n      later(function () {\n        assert.ok(resolved, 'promise resolves at the start of the next run loop');\n\n        done();\n      }, 25);\n    });\n\n    (0, _qunit.test)(methodName + ' triggers _notifyStoppedWriting and _notifyStartedWriting', function (assert) {\n      var done = assert.async();\n\n      assert.expect(2);\n\n      var pause = _emberLetterByLetterLxlTagsPause['default'].create();\n      var lxlContainer = LxlContainer.create({\n        _notifyStartedWriting: function _notifyStartedWriting() {\n          assert.ok(true, '_notifyStartedWriting ran');\n\n          done();\n        },\n\n        _notifyStoppedWriting: function _notifyStoppedWriting() {\n          assert.ok(true, '_notifyStoppedWriting ran');\n        }\n      });\n\n      pause[methodName](lxlContainer, [100]);\n    });\n\n    (0, _qunit.test)(methodName + ' resolves after the provided duration', function (assert) {\n      var done = assert.async();\n\n      assert.expect(2);\n\n      var resolved = false;\n\n      var pause = _emberLetterByLetterLxlTagsPause['default'].create();\n      var lxlContainer = LxlContainer.create();\n      var promise = pause[methodName](lxlContainer, [100]);\n\n      promise.then(function () {\n        resolved = true;\n      });\n\n      assert.ok(!resolved, 'promise not immediately resolved');\n\n      later(function () {\n        assert.ok(resolved, 'promise resolved after 100ms');\n\n        done();\n      }, 200);\n    });\n\n    (0, _qunit.test)(methodName + ' resolves after the bound key press', function (assert) {\n      var done = assert.async();\n\n      assert.expect(1);\n\n      var resolved = false;\n\n      var pause = _emberLetterByLetterLxlTagsPause['default'].create();\n      var lxlContainer = LxlContainer.create({\n        keys: ['Enter', 'ArrowRight'],\n\n        _advanceText: on((0, _emberKeyboard.keyDown)('Enter'), (0, _emberKeyboard.keyDown)('ArrowRight'), function () {\n          assert.ok(resolved, '_advanceText ran');\n        })\n      });\n\n      var promise = pause[methodName](lxlContainer, []);\n\n      promise.then(function () {\n        resolved = true;\n      });\n\n      lxlContainer.trigger((0, _emberKeyboard.keyDown)('ArrowRight'));\n\n      later(function () {\n        lxlContainer.trigger((0, _emberKeyboard.keyDown)('ArrowRight'));\n\n        done();\n      }, 10);\n    });\n\n    ['mouseUp', 'touchEnd'].forEach(function (eventName) {\n      (0, _qunit.test)(methodName + ' resolves after ' + eventName, function (assert) {\n        var done = assert.async();\n\n        assert.expect(1);\n\n        var resolved = false;\n\n        var pause = _emberLetterByLetterLxlTagsPause['default'].create();\n        var lxlContainer = LxlContainer.create({\n          keys: ['Enter', 'ArrowRight'],\n\n          _pressEvent: on(eventName, function () {\n            assert.ok(resolved, '_pressEvent ran');\n          })\n        });\n\n        var promise = pause[methodName](lxlContainer, []);\n\n        promise.then(function () {\n          resolved = true;\n        });\n\n        lxlContainer.trigger(eventName);\n\n        later(function () {\n          lxlContainer.trigger(eventName);\n\n          done();\n        }, 10);\n      });\n    });\n  });\n});","define('dummy/tests/unit/lxl-tags/pause-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tags/pause-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tags/pause-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tags/stagger-test', ['exports', 'ember', 'ember-letter-by-letter/lxl-tags/cps', 'qunit'], function (exports, _ember, _emberLetterByLetterLxlTagsCps, _qunit) {\n  var get = _ember['default'].get;\n\n  (0, _qunit.module)('Unit | LXLTag | cps');\n\n  ['open', 'execute'].forEach(function (methodName) {\n    (0, _qunit.test)(methodName + ' sets a new cps on the lxlContainer', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '20' };\n      var promise = cps[methodName](lxlContainer, [12.5]);\n\n      assert.equal(get(lxlContainer, 'cps'), 12.5, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 20, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' multiplies the initial cps if starting with a *', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '20' };\n      var promise = cps[methodName](lxlContainer, ['*2.5']);\n\n      assert.equal(get(lxlContainer, 'cps'), 50, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 20, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' adds the initial cps if starting with a +', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '20' };\n      var promise = cps[methodName](lxlContainer, ['+2.5']);\n\n      assert.equal(get(lxlContainer, 'cps'), 22.5, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 20, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' divides the initial cps if starting with a /', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '20' };\n      var promise = cps[methodName](lxlContainer, ['/2']);\n\n      assert.equal(get(lxlContainer, 'cps'), 10, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 20, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' subtracts the initial cps if starting with a -', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '20' };\n      var promise = cps[methodName](lxlContainer, ['-2.5']);\n\n      assert.equal(get(lxlContainer, 'cps'), 17.5, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 20, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' gives the remainder of the initial cps if starting with a %', function (assert) {\n      assert.expect(3);\n\n      var cps = _emberLetterByLetterLxlTagsCps['default'].create();\n      var lxlContainer = { cps: '22' };\n      var promise = cps[methodName](lxlContainer, ['%2.5']);\n\n      assert.equal(get(lxlContainer, 'cps'), 2, 'cps was updated');\n      assert.equal(get(cps, 'initialCps'), 22, 'initialCps was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n  });\n\n  (0, _qunit.test)('close returns the lxlContainer cps to its initial value', function (assert) {\n    assert.expect(2);\n\n    var cps = _emberLetterByLetterLxlTagsCps['default'].create({ initialCps: 5 });\n    var lxlContainer = { cps: '22' };\n    var promise = cps.close(lxlContainer);\n\n    assert.equal(get(lxlContainer, 'cps'), 5, 'cps was returned to initialCps');\n    assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n  });\n});","define('dummy/tests/unit/lxl-tags/stagger-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tags/stagger-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tags/stagger-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tags/tween-effect-test', ['exports', 'ember', 'ember-letter-by-letter/lxl-tags/tween-effect', 'qunit'], function (exports, _ember, _emberLetterByLetterLxlTagsTweenEffect, _qunit) {\n  var get = _ember['default'].get;\n\n  (0, _qunit.module)('Unit | LXLTag | tween effect');\n\n  ['open', 'execute'].forEach(function (methodName) {\n    (0, _qunit.test)(methodName + ' sets a new tweenEffect on the lxlContainer', function (assert) {\n      assert.expect(3);\n\n      var tweenEffect = _emberLetterByLetterLxlTagsTweenEffect['default'].create();\n      var lxlContainer = { tweenEffect: { foo: 'bar' } };\n      var promise = tweenEffect[methodName](lxlContainer, [{ baz: 'boom' }]);\n\n      assert.deepEqual(get(lxlContainer, 'tweenEffect'), { baz: 'boom' }, 'tweenEffect was updated');\n      assert.deepEqual(get(tweenEffect, 'initialTweenEffect'), { foo: 'bar' }, 'initialTweenEffect was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n  });\n\n  (0, _qunit.test)('close returns the lxlContainer tweenEffect to its initial value', function (assert) {\n    assert.expect(2);\n\n    var tweenEffect = _emberLetterByLetterLxlTagsTweenEffect['default'].create({ initialTweenEffect: { foo: 'bar' } });\n    var lxlContainer = { tweenEffect: { baz: 'boom' } };\n    var promise = tweenEffect.close(lxlContainer);\n\n    assert.deepEqual(get(lxlContainer, 'tweenEffect'), { foo: 'bar' }, 'tweenEffect was returned to initialTweenEffect');\n    assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n  });\n});","define('dummy/tests/unit/lxl-tags/tween-effect-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tags/tween-effect-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tags/tween-effect-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tags/tween-rate-test', ['exports', 'ember', 'ember-letter-by-letter/lxl-tags/tween-rate', 'qunit'], function (exports, _ember, _emberLetterByLetterLxlTagsTweenRate, _qunit) {\n  var get = _ember['default'].get;\n\n  (0, _qunit.module)('Unit | LXLTag | tween rate');\n\n  ['open', 'execute'].forEach(function (methodName) {\n    (0, _qunit.test)(methodName + ' sets a new tweenRate on the lxlContainer', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '20' };\n      var promise = tweenRate[methodName](lxlContainer, [12.5]);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 12.5, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 20, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' multiplies the initial tweenRate if starting with a *', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '20' };\n      var promise = tweenRate[methodName](lxlContainer, ['*2.5']);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 50, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 20, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' adds the initial tweenRate if starting with a +', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '20' };\n      var promise = tweenRate[methodName](lxlContainer, ['+2.5']);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 22.5, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 20, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' divides the initial tweenRate if starting with a /', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '20' };\n      var promise = tweenRate[methodName](lxlContainer, ['/2']);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 10, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 20, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' subtracts the initial tweenRate if starting with a -', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '20' };\n      var promise = tweenRate[methodName](lxlContainer, ['-2.5']);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 17.5, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 20, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n\n    (0, _qunit.test)(methodName + ' gives the remainder of the initial tweenRate if starting with a %', function (assert) {\n      assert.expect(3);\n\n      var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create();\n      var lxlContainer = { tweenRate: '22' };\n      var promise = tweenRate[methodName](lxlContainer, ['%2.5']);\n\n      assert.equal(get(lxlContainer, 'tweenRate'), 2, 'tweenRate was updated');\n      assert.equal(get(tweenRate, 'initialTweenRate'), 22, 'initialTweenRate was set');\n      assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n    });\n  });\n\n  (0, _qunit.test)('close returns the lxlContainer tweenRate to its initial value', function (assert) {\n    assert.expect(2);\n\n    var tweenRate = _emberLetterByLetterLxlTagsTweenRate['default'].create({ initialTweenRate: 5 });\n    var lxlContainer = { tweenRate: '22' };\n    var promise = tweenRate.close(lxlContainer);\n\n    assert.equal(get(lxlContainer, 'tweenRate'), 5, 'tweenRate was returned to initialTweenRate');\n    assert.equal(promise.constructor.name, 'Promise', 'returns a promise');\n  });\n});","define('dummy/tests/unit/lxl-tags/tween-rate-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tags/tween-rate-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tags/tween-rate-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/lxl-tween-adapters/jquery-test', ['exports', 'ember-letter-by-letter/lxl-tween-adapters/jquery', 'qunit'], function (exports, _emberLetterByLetterLxlTweenAdaptersJquery, _qunit) {\n\n  (0, _qunit.module)('Unit | LXLTweenAdapter | jquery');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var jquery = _emberLetterByLetterLxlTweenAdaptersJquery['default'].create();\n    assert.ok(jquery);\n  });\n});","define('dummy/tests/unit/lxl-tween-adapters/jquery-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/lxl-tween-adapters/jquery-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/lxl-tween-adapters/jquery-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/ember-add-class-to-test', ['exports', 'ember-letter-by-letter/utils/add-class-to', 'qunit'], function (exports, _emberLetterByLetterUtilsAddClassTo, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | add class to');\n\n  (0, _qunit.test)('it adds classes to a DOM element with no class', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsAddClassTo['default'])(['foo', 'bar'], '<code id=\"something\">');\n\n    assert.equal(result, '<code id=\"something\" class=\"foo bar\">', 'classes added');\n  });\n\n  (0, _qunit.test)('it adds classes to a DOM element with class', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsAddClassTo['default'])(['foo', 'bar'], '<code class=\"baz\">');\n\n    assert.equal(result, '<code class=\"foo bar baz\">', 'classes added');\n  });\n\n  (0, _qunit.test)('it returns closing tags as-is', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsAddClassTo['default'])(['foo', 'bar'], '</code>');\n\n    assert.equal(result, '</code>', 'classes not added');\n  });\n});","define('dummy/tests/unit/utils/ember-add-class-to-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/ember-add-class-to-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/ember-add-class-to-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/parse-lxl-tag-test', ['exports', 'ember-letter-by-letter/utils/parse-lxl-tag', 'qunit'], function (exports, _emberLetterByLetterUtilsParseLxlTag, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | parse lxl tag');\n\n  (0, _qunit.test)('it grabs the tagName', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[foo]]');\n\n    assert.equal(result.tagName, 'foo', 'tagName is correct');\n  });\n\n  (0, _qunit.test)('`method` is \"start\" if `#`', function (assert) {\n    assert.expect(3);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[#foo]]');\n\n    assert.equal(result.method, 'open', 'method is correct');\n    assert.ok(result.isOpening, '`isOpening` is true');\n    assert.ok(!result.isClosing, '`isClosing` is false');\n  });\n\n  (0, _qunit.test)('`method` is \"start\" if none', function (assert) {\n    assert.expect(3);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[foo]]');\n\n    assert.equal(result.method, 'execute', 'method is correct');\n    assert.ok(!result.isOpening, '`isOpening` is false');\n    assert.ok(!result.isClosing, '`isClosing` is false');\n  });\n\n  (0, _qunit.test)('`method` is \"stop\" if `/`', function (assert) {\n    assert.expect(3);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[/foo]]');\n\n    assert.equal(result.method, 'close', 'method is correct');\n    assert.ok(!result.isOpening, '`isOpening` is false');\n    assert.ok(result.isClosing, '`isClosing` is true');\n  });\n\n  (0, _qunit.test)('`params` are split by spaces', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[/foo bar baz]]');\n\n    assert.deepEqual(result.params, ['bar', 'baz'], 'params are correct');\n  });\n\n  (0, _qunit.test)('`params` are split by spaces, unless in quotes', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[/foo \"I went to the bar, and \\'ordered\\' a drink\" baz \\'single quotes \"also\" work\\' \"as do a coder\\'s unmatched quotes\"]]');\n\n    assert.deepEqual(result.params, [\"I went to the bar, and 'ordered' a drink\", 'baz', 'single quotes \"also\" work', \"as do a coder's unmatched quotes\"], 'params are correct');\n  });\n\n  (0, _qunit.test)('`params` can contain inner arrays', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[/foo bar (array inner \"and string\" (array deep) last) baz]]');\n\n    assert.deepEqual(result.params, ['bar', ['inner', 'and string', ['deep'], 'last'], 'baz'], 'params are correct');\n  });\n\n  (0, _qunit.test)('`params` can contain inner hashes', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _emberLetterByLetterUtilsParseLxlTag['default'])('[[/foo bar (hash foo=bar \"key string\"=\"value string\" myHash=(hash baz=burger myArray=(array 1 2 3 -4 +5 true false) another=value)) baz]]');\n\n    assert.deepEqual(result.params, ['bar', {\n      foo: 'bar',\n      'key string': 'value string',\n      myHash: {\n        baz: 'burger',\n        myArray: [1, 2, 3, -4, '+5', true, false],\n        another: 'value'\n      }\n    }, 'baz'], 'params are correct');\n  });\n});","define('dummy/tests/unit/utils/parse-lxl-tag-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/utils/parse-lxl-tag-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/parse-lxl-tag-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7hzhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}